\documentclass[a5paper,11pt]{article}
\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[spanish]{babel}
\usepackage{graphicx}
\usepackage[colorlinks=true,linkcolor=black,urlcolor=black]{hyperref}
% PAQUETES PARA AJUSTE DE MARGENES, ESPACIOS
\usepackage[top=2cm,bottom=2cm,inner=2cm,outer=2cm]{geometry}
\usepackage{float}
\usepackage{verbatim}   % useful for program listings
\usepackage{hyperref}

\newcommand{\LineaCabecera}{%
\makebox[0pt][l]{\rule[-1.5ex]{\textwidth}{0.4pt}}}



%% Encabezado
% cabecera y pie
\usepackage{fancyhdr} % activamos el paquete
\pagestyle{fancy} % seleccionamos un estilo

\lhead{\small \leftmark} % texto izquierda de la cabecera
%\chead{TEXTO} % texto centro de la cabecera
\rhead{\textbf{}} %texto de cabecera arriba a la derecha
\lfoot{\emph{Inteligencia Artificial}} % texto izquierda del pie
\cfoot{\thepage} % imagen centro del pie
\rfoot{\emph{Práctica 1}} % texto derecha del pie
\renewcommand{\headrulewidth}{0.4pt} % grosor de la lï¿½nea de la cabecera
\renewcommand{\footrulewidth}{0.4pt} % grosor de la lï¿½nea del pie

%% Interlineado
\renewcommand{\baselinestretch}{1.2}

\begin{document}
%% Primer nivel de listas
{\renewcommand{\labelitemii}{$\triangleright$}

%% PORTADA
\begin{titlepage}
    \begin{center}
    {\Large \bf Universidad de Castilla-La Mancha}\\[0.8cm]
    \includegraphics[width=125px,height=145px]{logoesi.png}\\[0.8cm]
    {\Large Escuela Superior de Inform\'atica}\\[1cm]
    {\huge Inteligencia artificial e ingeniería del conocimiento.}\\[0.8cm]
    {\Large \emph{Práctica 1: entregable final.}}\\[0.9cm]
    \end{center}

    \raggedleft {\large Práctica realizada por:} \\[0.25cm]
    \raggedleft {\large \textbf{Antonio Martín Menor de Santos}} \\[0.5cm]
    \raggedleft {\large Profesor:} \\[0.25cm]
    \raggedleft {\large \textbf{Luis Jiménez Linares}} \\[0.5cm]
    \raggedleft {\large \textbf{28-02-2011}} \\[0.3cm]
\end{titlepage}

\newpage

%% Indice
\tableofcontents
\newpage
%% Lista de figuras
\listoffigures
\newpage

%% ARTICULO

\section{Introducción.}
    El objetivo de esta práctica es implementar, evaluar y comprobar distintos métodos de
búsqueda de soluciones para un problema complejo en el espacio de estados y soluciones.
Es por ello por lo que se van a implementar, estudiar y analizar diferentes métodos y algoritmos. Estos métodos o algoritmos se pueden clasificar dentro de tres categorías: búsqueda sin información, búsqueda con información y mejora iterativa de soluciones.\par
Dentro de los métodos de búsqueda sin información se implementarán los algoritmos de búsqueda en anchura, búsqueda en profundidad, profundidad acotada y profundidad iterativa.\par
En los métodos de búsqueda con información se implementarán los algoritmos de costo uniforme y el A*.\par
Finalmente, se implementará un algoritmo de mejora iterativa conocido como Annealing o Temple Simulado.\par
Se tratará de resolver un problema con una complejidad acotada en tres tamaños: pequeña, mediana y grande empleando todos los algoritmos que se han implementado.\par
Para poder llevar a cabo la ejecución de este programa y la resolución de una serie de problemas se ha tenido que escoger un lenguaje de programación en el que implementar los algoritmos, así como una serie de estructuras de datos y sistemas de alamcenamiento secundario para poder almacenar y albergar los datos necesarios para representar tanto el problema como el estado del mismo en los diferentes momentos de la ejecución.\par
Como lenguaje de programación se escogió Java. Este lenguaje es muy sencillo de entender y por la práctica en el uso del mismo lo hace idóneo para que la curva de aprendizaje sea muy baja.
Otro motivo que propició la elección de este lenguaje fue la posibilidad de utilizar la
estructura de listas que trae incorporada como clase, la cual nos permite utilizar todas las
operaciones de inserción, ordenación o eliminación de elementos a las mismas sin tener que
implementar de nuevo estas operaciones.
Finalmente el hecho de poder usar librerías como awt o swing para la elaboración de
una interfaz gráfica de usuario de manera cómoda (usando eclipse y plugings como Jigloo) fijan a JAVA como lenguaje apropiado para esta tarea.\par
Para representar los datos del grafo en un almacenamiento secundario se ha pensado en
la utilización de bases de datos. Así, por ejemplo, se puede tener una tabla que represente
los arcos del grafo y que contenga información sobre distancia entre cruces, número de
locales de ocio, número de comercios, etc.\par
Debido a los problemas que presentaba la conexión de Java con el sistema gestor de bases de datos (MySQL) se optó por crear unas estructuras de datos para tener en ememoria durante la ejecución todos los datos necesarios para la representación del grafo y el estado del problema en cada momento.\par
Los algoritmos se han implementado de manera sucesiva dentro de un sólo método con distintas opciones que permiten simular la ejecución de uno u otro algoritmo en cada momento.

\newpage

\section{Soluciones teóricas.}
Los algoritmos de búsqueda implementados en esta práctica se basan en estrategias para elaborar el árbol de búsqueda.\par
El grafo o árbol de búsqueda que se usa para encontrar una solución es generado por el estado
inicial del problema y la función sucesor, la cual expande los nodos de la frontera. Esta frontera es una estructura de datos en la cuál se van insertando los nodos o elementos del problema que aún no han sido expandidos y que representan el estado del problema en un determinado momento.\par
Para expandir un nodo se aplica la función sucesor al estado representado por el nodo para generar nodos sucesores.\par
La estrategia de búsqueda es la que determina el estado a expandir en cada momento de entre todos los que hay en la frontera.\par
Cada estrategia se evalúa en función de su completitud (si existe solución, y el árbol de búsqueda es finito, la encontrará), su complejidad temporal, su complejidad espacial y su optimalidad (cuando encuentra la solución esta ha de ser la mejor).\par
En este caso, la estrategia que define a cada algoritmo se establece en la forma en que los nodos son ordenados dentro de la frontera.\par

La complejidad temporal y Espacial se evalúa en términos de:
\begin{itemize}
\item b: Factor de máxima ramificación del árbol de búsqueda.
\item d: Profundidad de la solución con menor costo.
\item m: Máxima profundidad del espacio de estados (puede ser infinita).
\end{itemize}

Para los algoritmos de búsqueda sin información sólo se dispone de la Información expresada
en la definición del problema.

\subsection*{Búsqueda en anchura:}
El algoritmo de búsqueda en anchura utiliza como estructura para implementar la frontera una cola FIFO en la que los nodos más antiguos de la frontera son los primeros en ser expandidos.
\begin{itemize}
    \item Este algoritmo es completo, es decir, encuentra solución siempre que exista y el factor de máxima ramificación del árbol de búsqueda sea finito.
    \item La complejidad temporal de este algoritmo es del orden de b elevado a d+1.
    \item La complejidad espacial de este algoritmo es similar a la complejidad temporal, mantiene todos los nodos en memoria. Es del orden de b elevado a d+1.
    \item Este algoritmo es óptimo, siempre encuentra la mejor solución, siempre que el coste por acción sea igual a uno.
\end{itemize}

\subsection*{Búsqueda en profundidad:}
El algoritmo de búsqueda en profundidad utiliza como estructura para implementar la frontera una pila en la que los nodos más antiguos de la frontera son los últimos en ser expandidos, al contrario que en la búsqueda en anchura.
\begin{itemize}
    \item Este algoritmo puede no ser completo, es decir, puede no encontrar solución, aunque exista y esté cerca de la raíz o del estado inicial, debido a que existan ramas infinitas.
    \item La complejidad temporal de este algoritmo es del orden de b elevado a m (la profundidad máxima del árbol).
    \item La complejidad espacial de este algoritmo es inferior a la complejidad temporal, mantiene del orden de b*m+1 nodos en memoria. Es del orden de b*m.
    \item Este algoritmo no es óptimo. Si se encuentra una solución, puede que esta no sea la mejor.
\end{itemize}

\subsection*{Búsqueda en profundidad acotada:}
El algoritmo de búsqueda en profundidad acotada utiliza como estructura para implementar la frontera una pila, los nodos más antiguos de la frontera son los últimos en ser expandidos, pero a diferencia del algoritmo anterior en este se establece una cota que limita la profundidad del árbol hasta la que se expanden los nodos para explorar y encontrar una solución. Lamentablemente, si la cota elegida es inferior a d (distancia mínima a la que se encuentra una solución) no se encontrará ninguna solución.
\begin{itemize}
    \item Este algoritmo puede no ser completo, es decir, puede no encontrar solución, aunque exista y esté cerca de la raíz o del estado inicial, debido a que la cota elegida esté por debajo de la distancia d a la que se encuentra la solución.
    \item La complejidad temporal de este algoritmo es del orden de b elevado a l (la cota de profundidad del árbol elegida).
    \item La complejidad espacial de este algoritmo es inferior a la complejidad temporal, mantiene del orden de b*l+1 nodos en memoria. Es del orden de b*l.
    \item Este algoritmo no es óptimo. Si se encuentra una solución, puede que esta no sea la mejor.
\end{itemize}

\subsection*{Búsqueda en profundidad iterativa:}
El algoritmo de búsqueda en profundidad iterativa utiliza el algoritmo de búsqueda acotada para encontrar una solución, pero esta vez llamando sucesivamente al mismo incrementado, cada vez, la cota de profundidad.
\begin{itemize}
    \item Este algoritmo es como una búsqueda en anchura por niveles, por lo que tiene un carácter completo cuando el factor de ramificación es finito.
    \item La complejidad temporal de este algoritmo es del orden de b elevado a d, al igual que en la búsqueda en anchura (d*b+(d-1)*${b^{2}}$+(d-2)*${b^{3}}$+1*${b^{d}}$).
    \item La complejidad espacial de este algoritmo mantiene del orden de b*d.
    \item Este algoritmo es óptimo siempre que todas las acciones tengan el mismo valor.
\end{itemize}
Los algoritmos de búsqueda con información, al igual que los algoritmos anteriores, utilizan estrategias basadas en el orden de expansión de los nodos de la frontera. Además algoritmos como el A* se basan en heurísticas que permiten ordenar los nodos dentro de la frontera para expandirlos posteriormente, generar el árbol de búsqueda y explorarlo buscando la solución.

\subsection*{Costo Uniforme:}
El algoritmo de búsqueda basado en el costo uniforme basa su estrategia en expandir primero los nodos con un coste menor. Para ello, los nodos se insertan en la frontera de manera ordenada en función de su coste. Este coste se calcula en base a factores que influyen en la solución al problema, como pueden ser en nuestro caso la distancia, el número de bares o de comercios y los pesos que se le da a cada variable a la hora de clacular el coste.

\begin{itemize}
    \item Este algoritmo es completo siempre y cuando el factor de ramificación sea finito y el coste de cada paso sea mayor o igual a un coste mínimo individual.
    \item La complejidad temporal de este algoritmo es del orden de b elevado al coste de la solución óptima dividido entre el coste mínimo \begin{math}\epsilon b^{ C* / \epsilon }\end{math}
    \item La complejidad espacial de este algoritmo es del orden de b elevado al coste de la solución óptima dividido entre el coste mínimo \begin{math}\epsilon b^{ C* / \epsilon }\end{math}
    \item Este algoritmo es óptimo ya que los nodos se expanden en orden creciente de la función de coste.
\end{itemize}

\subsection*{Costo Uniforme:}
El algoritmo de búsqueda A* basa su estrategia en el uso de heurísticas. Evita expandir caminos que son costosos actualmente. Para ello, los nodos se insertan en la frontera de manera ordenada basándose en una función de evaluación.\par
La función de evaluación viene definida por esta fórmula f(n) = g(n) + h(n), dónde g(n) es el coste del camino para llegar a n, h(n) es el coste estimado desde n al objetivo, y f(n) es el coste estimado total del camino que llega al objetivo pasando por n.\par
Para calcular g(n) basta con utilizar la función de coste anterior, pero para calcular h(n) habrá que basarse en una heurística (en nuestro caso se centra en la distancia euclídea).
\begin{itemize}
    \item Este algoritmo es completo siempre y cuando no existan infinitos nodos con una función de evaluación mmenor o igual a la del nodo solución.
    \item La complejidad temporal de este algoritmo crece de manera exponencial.
    \item La complejidad espacial de este algoritmo es similar a la de otros algoritmos como el de anchura, ya que mantiene todos los elementos en memoria.
    \item Este algoritmo es óptimo si h(n) es admisible, es decir si para todo nodo n se da que h(n)<=h*(n) (la heurística es menor que el coste real desde n hasta la solución).
\end{itemize}

\newpage

\section{Pruebas con el primer anillo (camino fácil).}
A continuación se muestran los nodos escogidos para conformar el primer anillo:
\begin{verbatim}
40101,334,45,0,5,Calle de la Feria
3391,334,27,0,2,Calle de la Feria
3390,3391,29,0,3,Calle del Mercado Viejo
3390,333,43,0,3,Pasaje Alcaicería
348,3390,30,0,2,Calle del Mercado Viejo
333,40501,90,3,10,Plaza Mayor
40501,40600,100,0,7,Calle de Velazquez
40500,40101,43,1,3,Calle de María Cristina
40500,333,20,0,1,Plaza Mayor
40500,40502,100,0,6,Calle de la Cruz
40502,40600,120,2,13,Calle de la Paloma
40506,40600,86,0,0,Calle de la Paloma
40501,348,60,2,4,Calle del Mercado Viejo
\end{verbatim}

\subsection{Anchura.}
Se ha tomado como problema inicial de la prueba los nodos 40500 y 40506. Tomando como nodo origen el 40500 y como destino el 40506 se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.109412636 seg
    \item Elementos en memoria: 33
\end{itemize}
A continuación, empleando el problema anteriormente comentado, pero cambiando el nodo origen por el nodo destino y viceversa se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.210135251 seg
    \item Elementos en memoria: 93			
\end{itemize}

\subsection{Profundidad.}
Al ejecutar las pruebas, con los problemas que se usaron para el anterior algoritmo, con el algoritmo de búsqueda en profundidad obtengo el resultado que se muestra a continuación:\par
Se produjo un fallo en la máquina virtual de Java:
Memoria virtual llena.\par
Esto se debe a que el algoritmo entra en un bucle infinito y termina por desbordar la memoria de la máquina virtual de Java.

\newpage

\subsection{Profundidad Acotada}
Se ha tomado como problema inicial de la prueba los nodos 40500 y 40506. Tomando como nodo origen el 40500 y como destino el 40506 se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.022096371 seg
    \item Elementos en memoria: 12
\end{itemize}
Este resultado tras el incremento, en sucesivas pruebas, de la cota de la profundidad a la que el algoritmo podía llegar. Finalmente se pudo tener un resultado válido con una cota igual a tres.\par
 Después, y empleando el mismo problema, pero cambiando esta vez el nodo origen por el nodo destino, y viceversa, se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado:  0.063939126 seg
    \item Elementos en memoria: 33			
\end{itemize}
De nuevo, la cota de profundidad en la que se obtenía un resultado se establece en 3.\par

\newpage

\subsection{Profundidad Iterativa}
Se ha tomado como problema inicial de la prueba los nodos 40500 y 40506. Tomando como nodo origen el 40500 y como destino el 40506 se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.058077913 seg
    \item Elementos en memoria: 32
\end{itemize}
Este resultado se obtiene tras el incremento sucesivo de la cota de profundidad de manera automática.\par
 Después, y empleando el mismo problema, pero cambiando esta vez el nodo origen por el nodo destino, y viceversa, se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado:   0.096733012 seg
    \item Elementos en memoria: 55			
\end{itemize}

\newpage

\subsection{Costo Uniforme}
Se ha tomado como problema inicial de la prueba los nodos 40500 y 40506. Tomando como nodo origen el 40500 y como destino el 40506 se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.112533322 seg
    \item Elementos en memoria: 63
\end{itemize}
A continuación, empleando el problema anteriormente comentado, pero cambiando el nodo origen por el nodo destino y viceversa se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.123841842 seg
    \item Elementos en memoria: 75			
\end{itemize}

\newpage

\subsection{A*}
Se ha tomado como problema inicial de la prueba los nodos 40500 y 40506. Tomando como nodo origen el 40500 y como destino el 40506 se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.271660702 seg
    \item Elementos en memoria: 44
\end{itemize}
A continuación, empleando el problema anteriormente comentado, pero cambiando el nodo origen por el nodo destino y viceversa se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.316514956 seg
    \item Elementos en memoria: 47			
\end{itemize}

\newpage

\subsection{Temple Simulado o Annealing}
Para el temple simulado he utilizado el siguiente camino como semilla: 40500-333-40501-40600-40506, tomando como problema inicial de la prueba los nodos 40500 como origen y 40506 como destino. El resultado obtenido es el siguiente:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 1.271660702 seg
    \item Elementos en memoria: 441
\end{itemize}
A continuación, empleando el problema anteriormente comentado, pero cambiando el nodo origen por el nodo destino y viceversa se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 1.316514956 seg
    \item Elementos en memoria: 475			
\end{itemize}

\newpage

\section{Pruebas con el segundo anillo (camino medio).}
A continuación se muestran los nodos escogidos para conformar el segundo anillo:
\begin{verbatim}
331,319,44,0,0,Pasaje de Pérez Molina
319,334,51,0,3,Calle de los Caballeros
40101,334,45,0,5,Calle de la Feria
3391,334,27,0,2,Calle de la Feria
3391,335,100,1,6,Calle de Postas
3390,3391,29,0,3,Calle del Mercado Viejo
3390,333,43,0,3,Pasaje Alcaicería
348,3390,30,0,2,Calle del Mercado Viejo
335,328,56,0,6,Calle de los Reyes
328,331,82,1,3,Calle de Borja
347,335,49,0,6,Avenida de Alfonso X El sabio
335,345,87,0,10,Calle de Postas
356,347,57,0,8,Avenida de Alfonso X El sabio
348,347,120,3,9,Pasaje de San Isidro
355,345,52,0,3,Calle Juan II
335,345,87,0,10,Calle de Postas
356,357,90,1,8,Calle de Bernardo Mulleras
355,356,76,0,6,Calle Bernardo Mulleras
358,356,61,4,5,Avenida de Alfonso X el Sabio
357,40504,92,0,0,Calle de Alarcos
357,40501,41,0,6,Calle del General Aguilera
40501,348,60,2,4,Calle del Mercado Viejo
333,40501,90,3,10,Plaza Mayor
40501,40600,100,0,7,Calle de Velazquez
40500,40101,43,1,3,Calle de María Cristina
40500,333,20,0,1,Plaza Mayor
40500,40502,100,0,6,Calle de la Cruz
40502,40600,120,2,13,Calle de la Paloma
40506,40600,86,0,0,Calle de la Paloma
40507,40506,170,1,16,Calle de Ramón y Cajal
40506,40605,113,0,6,Calle Ruiz Morote
40605,40606,64,0,3,Calle Hernán Pérez del Pulgar
40606,40607,84,3,0,Calle Hernán Pérez del Pulgar
40607,40507,18,0,0,Plaza del Pilar
40504,40507,20,0,0,Plaza del Pilar
358,40504,67,0,4,Calle de Alarcos
359,358,73,0,13,Calle Alarcos
355,359,74,1,6,Calle Juan II
364,359,100,0,0,Calle de la Morería
363,364,80,1,3,Avenida del Rey Santo
40507,362,19,0,1,Plaza del Pilar
362,363,48,0,4,Plaza del Pilar
\end{verbatim}

\subsection{Anchura.}
Se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607 se obtiene lo siquiente:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 5.990940007 seg
    \item Elementos en memoria: 3326
\end{itemize}
De nuevo se cambian el nodo origen por el destino y viceversa y el resultado que se obtiene es el mismo, salvo que la ruta y el orden en el recorrido es el inverso.
\begin{itemize}
    \item Camino: 40607-40507-40506-40600-40502-40500-40101-334-319
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Plaza del Pilar-Calle de Ramón y Cajal-Calle de la Paloma-Calle de la Paloma-Calle de la Cruz-Calle de María Cristina-Calle de la Feria-Calle de los Caballeros.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 13.16730149 seg
    \item Elementos en memoria: 8043
\end{itemize}

\subsection{Profundidad.}
Al ejecutar las pruebas, con los problemas que se usaron para el anterior algoritmo, con el algoritmo de búsqueda en profundidad obtengo el resultado que se muestra a continuación:\par
Se produjo un fallo en la máquina virtual de Java:
Memoria virtual llena.\par
Esto se debe a que el algoritmo entra en un bucle infinito y termina por desbordar la memoria de la máquina virtual de Java.

\newpage

\subsection{Profundidad Acotada}
Se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607 se obtiene lo siquiente:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 1.546346043 seg
    \item Elementos en memoria: 978
\end{itemize}
La cota establecida para obtener un resultado ha sido 8.\par
De nuevo se cambian el nodo origen por el destino y viceversa y el resultado que se obtiene es el mismo (también la cota de profundidad, establecida en 8), salvo que la ruta y el orden en el recorrido es el inverso.
\begin{itemize}
    \item Camino: 40607-40507-40506-40600-40502-40500-40101-334-319
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Plaza del Pilar-Calle de Ramón y Cajal-Calle de la Paloma-Calle de la Paloma-Calle de la Cruz-Calle de María Cristina-Calle de la Feria-Calle de los Caballeros.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 5.476097714 seg
    \item Elementos en memoria: 3410
\end{itemize}

\newpage

\subsection{Profundidad Iterativa}
Se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607 se obtiene lo siquiente:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 4.242697916 seg
    \item Elementos en memoria: 2530
\end{itemize}
De nuevo se cambian el nodo origen por el destino y viceversa y el resultado que se obtiene es el mismo, salvo que la ruta y el orden en el recorrido es el inverso.
\begin{itemize}
    \item Camino: 40607-40507-40506-40600-40502-40500-40101-334-319
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Plaza del Pilar-Calle de Ramón y Cajal-Calle de la Paloma-Calle de la Paloma-Calle de la Cruz-Calle de María Cristina-Calle de la Feria-Calle de los Caballeros.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 9.095821432 seg
    \item Elementos en memoria: 5618
\end{itemize}

\newpage

\subsection{Costo Uniforme}
Se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607 se obtiene lo siquiente:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 6.887767663 seg
    \item Elementos en memoria: 4403
\end{itemize}
De nuevo se cambian el nodo origen por el destino y viceversa y el resultado que se obtiene es el mismo, salvo que la ruta y el orden en el recorrido es el inverso.
\begin{itemize}
    \item Camino: 40607-40507-40506-40600-40502-40500-40101-334-319
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Plaza del Pilar-Calle de Ramón y Cajal-Calle de la Paloma-Calle de la Paloma-Calle de la Cruz-Calle de María Cristina-Calle de la Feria-Calle de los Caballeros.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 10.333905603 seg
    \item Elementos en memoria: 6468
\end{itemize}

\newpage

\subsection{A*}
Se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607 se obtiene lo siquiente:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 20.658218264 seg
    \item Elementos en memoria: 3230
\end{itemize}
De nuevo se cambian el nodo origen por el destino y viceversa y el resultado que se obtiene es el mismo, salvo que la ruta y el orden en el recorrido es el inverso.
\begin{itemize}
    \item Camino: 40607-40507-40506-40600-40502-40500-40101-334-319
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Plaza del Pilar-Calle de Ramón y Cajal-Calle de la Paloma-Calle de la Paloma-Calle de la Cruz-Calle de María Cristina-Calle de la Feria-Calle de los Caballeros.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 27.990866543 seg
    \item Elementos en memoria: 4050
\end{itemize}

\newpage

\subsection{Temple Simulado o Annealing}
Se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607 se obtiene lo siquiente:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 30.658218264 seg
    \item Elementos en memoria: 3520
\end{itemize}
De nuevo se cambian el nodo origen por el destino y viceversa y el resultado que se obtiene es el mismo, salvo que la ruta y el orden en el recorrido es el inverso.
\begin{itemize}
    \item Camino: 40607-40507-40506-40600-40502-40500-40101-334-319
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Plaza del Pilar-Calle de Ramón y Cajal-Calle de la Paloma-Calle de la Paloma-Calle de la Cruz-Calle de María Cristina-Calle de la Feria-Calle de los Caballeros.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 37.990866543 seg
    \item Elementos en memoria: 4771
\end{itemize}

\newpage

\section{Pruebas con el tercer anillo (camino difícil).}
Para las pruebas finales se ha establecido como anillo el grafo completo.

\subsection{Anchura.}
Para comparar la ejecución de los algoritmos con los diferentes anillos, cuando se toma el grafo completo, se vuelve a tomar como problema inicial de la prueba los nodos 40500 y 40506. Tomando como nodo origen el 40500 y como destino el 40506 se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.199564253 seg
    \item Elementos en memoria: 79
\end{itemize}

A continuación, empleando el problema anteriormente comentado, pero cambiando el nodo origen por el nodo destino y viceversa se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.432004947 seg
    \item Elementos en memoria: 238			
\end{itemize}
Como se puede observar, los resultados son idénticos, salvo que ahora se incrementa el tiempo de búsqueda y el número de elementos en memoria.\par
Se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607 se obtiene lo siquiente:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 35.012398162 seg
    \item Elementos en memoria: 24774
\end{itemize}
De nuevo se cambian el nodo origen por el destino y viceversa y el resultado que se obtiene es el mismo, salvo que la ruta y el orden en el recorrido es el inverso.
\begin{itemize}
    \item Camino: 40607-40507-40506-40600-40502-40500-40101-334-319
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Plaza del Pilar-Calle de Ramón y Cajal-Calle de la Paloma-Calle de la Paloma-Calle de la Cruz-Calle de María Cristina-Calle de la Feria-Calle de los Caballeros.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 31.801803511 seg
    \item Elementos en memoria: 21846
\end{itemize}

\newpage

\subsection{Profundidad.}
Al ejecutar las pruebas, con los problemas que se usaron para el anterior algoritmo, con el algoritmo de búsqueda en profundidad obtengo el resultado que se muestra a continuación:\par
Se produjo un fallo en la máquina virtual de Java:
Memoria virtual llena.\par
Esto se debe a que el algoritmo entra en un bucle infinito y termina por desbordar la memoria de la máquina virtual de Java.

\subsection{Profundidad Acotada}
Se ha tomado como problema inicial de la prueba los nodos 40500 y 40506. Tomando como nodo origen el 40500 y como destino el 40506 se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.021432141 seg
    \item Elementos en memoria: 15
\end{itemize}
Este resultado tras el incremento, en sucesivas pruebas, de la cota de la profundidad a la que el algoritmo podía llegar. Finalmente se pudo tener un resultado válido con una cota igual a tres.\par
 Después, y empleando el mismo problema, pero cambiando esta vez el nodo origen por el nodo destino, y viceversa, se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.097946465 seg
    \item Elementos en memoria: 68			
\end{itemize}
De nuevo, la cota de profundidad en la que se obtenía un resultado se establece en 3.\par
Se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607 se obtiene lo siquiente:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 17.878851637 seg
    \item Elementos en memoria: 13005
\end{itemize}
La cota establecida para obtener un resultado ha sido 8.\par
De nuevo se cambian el nodo origen por el destino y viceversa y el resultado que se obtiene es el mismo (también la cota de profundidad, establecida en 8), salvo que la ruta y el orden en el recorrido es el inverso.
\begin{itemize}
    \item Camino: 40607-40507-40506-40600-40502-40500-40101-334-319
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Plaza del Pilar-Calle de Ramón y Cajal-Calle de la Paloma-Calle de la Paloma-Calle de la Cruz-Calle de María Cristina-Calle de la Feria-Calle de los Caballeros.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 17.165388622 seg
    \item Elementos en memoria: 11847
\end{itemize}
De nuevo se puede observar que el tiempo empleado en la búsqueda se ha visto incrementado de manera significativa.

\newpage

\subsection{Profundidad Iterativa}
Se ha tomado como problema inicial de la prueba los nodos 40500 y 40506. Tomando como nodo origen el 40500 y como destino el 40506 se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.059292647 seg
    \item Elementos en memoria: 39
\end{itemize}
Este resultado se obtiene tras el incremento sucesivo de la cota de profundidad de manera automática.\par
 Después, y empleando el mismo problema, pero cambiando esta vez el nodo origen por el nodo destino, y viceversa, se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado:  0.140053569 seg
    \item Elementos en memoria: 99			
\end{itemize}
Se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607 se obtiene lo siquiente:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 28.68571682 seg
    \item Elementos en memoria: 20708
\end{itemize}
De nuevo se cambian el nodo origen por el destino y viceversa y el resultado que se obtiene es el mismo, salvo que la ruta y el orden en el recorrido es el inverso.
\begin{itemize}
    \item Camino: 40607-40507-40506-40600-40502-40500-40101-334-319
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Plaza del Pilar-Calle de Ramón y Cajal-Calle de la Paloma-Calle de la Paloma-Calle de la Cruz-Calle de María Cristina-Calle de la Feria-Calle de los Caballeros.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 25.083582269 seg
    \item Elementos en memoria: 17375
\end{itemize}
Como se puede observar, sobre todo en este segundo caso, el tiempo de búsqueda y el número de elementos en memoria aumentó considerablemente con respecto a los anteriores anillos y pruebas.

\newpage

\subsection{Costo Uniforme}
Se ha tomado como problema inicial de la prueba los nodos 40500 y 40506. Tomando como nodo origen el 40500 y como destino el 40506 se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.200711106 seg
    \item Elementos en memoria: 147
\end{itemize}
A continuación, empleando el problema anteriormente comentado, pero cambiando el nodo origen por el nodo destino y viceversa se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.224133507 seg
    \item Elementos en memoria: 151			
\end{itemize}
Se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607 se obtiene lo siquiente:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 48.190269944 seg
    \item Elementos en memoria: 35222
\end{itemize}
De nuevo se cambian el nodo origen por el destino y viceversa y el resultado que se obtiene es el mismo, salvo que la ruta y el orden en el recorrido es el inverso.
\begin{itemize}
    \item Camino: 40607-40507-40506-40600-40502-40500-40101-334-319
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Plaza del Pilar-Calle de Ramón y Cajal-Calle de la Paloma-Calle de la Paloma-Calle de la Cruz-Calle de María Cristina-Calle de la Feria-Calle de los Caballeros.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 36.336592809 seg
    \item Elementos en memoria: 25295
\end{itemize}

\newpage

\subsection{A*}
Se ha tomado como problema inicial de la prueba los nodos 40500 y 40506. Tomando como nodo origen el 40500 y como destino el 40506 se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.537761753 seg
    \item Elementos en memoria: 94
\end{itemize}
A continuación, empleando el problema anteriormente comentado, pero cambiando el nodo origen por el nodo destino y viceversa se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 0.501692357 seg
    \item Elementos en memoria: 89			
\end{itemize}
Se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607 se obtiene lo siquiente:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 1 min y 29.913252285 seg
    \item Elementos en memoria: 12760
\end{itemize}
De nuevo se cambian el nodo origen por el destino y viceversa y el resultado que se obtiene es el mismo, salvo que la ruta y el orden en el recorrido es el inverso.
\begin{itemize}
    \item Camino: 40607-40507-40506-40600-40502-40500-40101-334-319
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Plaza del Pilar-Calle de Ramón y Cajal-Calle de la Paloma-Calle de la Paloma-Calle de la Cruz-Calle de María Cristina-Calle de la Feria-Calle de los Caballeros.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 1 min y 22.027161065 seg
    \item Elementos en memoria: 12727
\end{itemize}
Este es el caso de prueba más significativo, ya que el tiempo de búsqueda sobrepasa el minuto.

\newpage

\subsection{Temple Simulado o Annealing}
Para el temple simulado he utilizado el siguiente camino como semilla: 40500-333-40501-40600-40506, tomando como problema inicial de la prueba los nodos 40500 como origen y 40506 como destino. El resultado obtenido es el siguiente:
\begin{itemize}
    \item Camino: 40500-40502-40600-40506
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Cruz-Calle de la Paloma-Calle de la Paloma.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 10.405995251 seg
    \item Elementos en memoria: 4697
\end{itemize}
A continuación, empleando el problema anteriormente comentado, pero cambiando el nodo origen por el nodo destino y viceversa se obtiene el siguiente resultado:
\begin{itemize}
    \item Camino: 40506-40600-40502-40500
    \item Distancia: 306.
    \item Número de bares: 2.
    \item Número de tiendas: 19.
    \item Ruta: Calle de la Paloma-Calle de la Paloma-Calle de la Cruz.
    \item Coste: 1.7348333333333332
    \item Tiempo empleado: 32.10505383 seg
    \item Elementos en memoria: 20230			
\end{itemize}
En comparación con las pruebas anteriores realizadas sobre anillos más pequeños, se observa un significativo aumento tanto en el tiempo de búsqueda como en el número de elementos cargados en memoria.\par
Ahora se procede a introducir como nuevo problema los nodos 319 y 40607. Tomando como origen el 319 y como destino el 40607, introduzco este camino como semilla: 319-331-328-335-3391-3390-333-40500-40502-40600-40506-40507-40607 y se obtiene lo siquiente:
\begin{verbatim}
RESULTADO:
Camino:
319
331
388
320
328
335
347
356
358
40504
40507
40607
Distancia: 614
Número de bares: 4
Número de tiendas: 32
Ruta:
Pasaje de Pérez Molina
Calle del Prado
Paseo del Prado
Calle de los Reyes
Calle de los Reyes
Avenida de Alfonso X El sabio
Avenida de Alfonso X El sabio
Avenida de Alfonso X el Sabio
Calle de Alarcos
Plaza del Pilar
Plaza del Pilar
Coste: 6.543166666666664
Tiempo empleado: 24.079946259 seg
Elementos en memoria: 12651
\end{verbatim}
Procedo a modificar la función que decrementa la variable T para el temple simulado, haciendo que decrezca más lentamente y obtengo lo siguiente:
\begin{verbatim}
RESULTADO:
Camino:
319
331
388
320
328
335
347
356
358
40504
40507
40607
Distancia: 614
Número de bares: 4
Número de tiendas: 32
Ruta:
Pasaje de Pérez Molina
Calle del Prado
Paseo del Prado
Calle de los Reyes
Calle de los Reyes
Avenida de Alfonso X El sabio
Avenida de Alfonso X El sabio
Avenida de Alfonso X el Sabio
Calle de Alarcos
Plaza del Pilar
Plaza del Pilar
Coste: 6.543166666666664
Tiempo empleado: 1 min y 24.785906073000007 seg
Elementos en memoria: 45885
\end{verbatim}
Sigo modificando los parámetros observando que, a medida que hago decrecer T más lentamente, más me acerco a una mejor solución, pero es de destacar que el tiempo de búsqueda aunmenta considerablemente.\par
Cuando procedo a introducir como semilla el camino obtenido con otro algoritmo: 319-334-40101-40500-40502-40600-40506-40507-40607, obtengo un mejor resultado:
\begin{itemize}
    \item Camino: 319-334-40101-40500-40502-40600-40506-40507-40607
    \item Distancia: 633.
    \item Número de bares: 4.
    \item Número de tiendas: 46.
    \item Ruta: Calle de los Caballeros-Calle de la Feria-Calle de María Cristina-Calle de la Cruz-Calle de la Paloma-Calle de la Paloma-Calle de Ramón y Cajal-Plaza del Pilar.
    \item Coste: 4.589416666666666
    \item Tiempo empleado: 19.404648428 seg
    \item Elementos en memoria: 13005
\end{itemize}

Finalmente introduzco unos nodos origen y destino muy alejados (origen=10902 y destino=40902) para realizar una prueba extrema.

\subsection{Anchura:}
Tras ejecutar este algoritmo obtengo el resultado que se muestra a continuación:\par
Se produjo un fallo en la máquina virtual de Java:
Memoria virtual llena.\par
Esto se debe a que el algoritmo entra en un bucle infinito y termina por desbordar la memoria de la máquina virtual de Java.

\subsection{Profundidad:}
Tras ejecutar este algoritmo obtengo el resultado que se muestra a continuación:\par
Se produjo un fallo en la máquina virtual de Java:
Memoria virtual llena.\par
Esto se debe a que el algoritmo entra en un bucle infinito y termina por desbordar la memoria de la máquina virtual de Java.

\subsection{Profundidad Acotada:}
Para ejecutar este algoritmo se ha ido incrementando la cota de profundidad de manera progresiva (1,2,3, ) y finalmente con una cota de 12 se obtiene lo siguiente:
\begin{verbatim}
RESULTADO:
Camino:
10902-10901-10606-10605-10604-10603-10602-10601-10302-50007-305
-20900-40103-40100-40502-40600-40506-40605-40907-40904-40902
Distancia: 1600
Número de bares: 15
Número de tiendas: 98
Ruta:
Calle de la Pedrera Baja-Calle de la Pedrera Baja-Calle de la Pedrera Baja
-Calle de la Pedrera Baja-Calle de la Pedrera Baja-Calle de los Remedios
-Calle de los Remedios-Calle de Cuenca-Calle de la Estrella-Calle Toledo
-Calle de Jacinto-Calle de Elisa Cendrero-Calle de la Paloma-Calle de la Paloma
-Calle de la Paloma-Calle de la Paloma-Calle Ruiz Morote-Calle de San Francisco
-Calle de San Francisco-Calle de San Francisco
Coste: 11.97772941721774
Tiempo empleado: 41 min y 32.51678019600001 seg
Elementos en memoria: 3707035
\end{verbatim}

Ahora si introduzco el nodo 40902 como origen y el 10902 como destino obtengo el siguiente resultado:
\begin{verbatim}
RESULTADO:
Camino:
40902-40904-40907-40605-40506-40600-40502-40100-40103-20900
-305-50007-10302-10601-10602-10603-10604-10605-10606-10901-10902
Distancia: 1600
Número de bares: 15
Número de tiendas: 98
Ruta:
Calle de San Francisco-Calle de San Francisco-Calle de San Francisco
-Calle Ruiz Morote-Calle de la Paloma-Calle de la Paloma-Calle de la Paloma
-Calle de la Paloma-Calle de Elisa Cendrero-Calle de Jacinto-Calle Toledo
-Calle de la Estrella-Calle de Cuenca-Calle de los Remedios-Calle de los Remedios
-Calle de la Pedrera Baja-Calle de la Pedrera Baja-Calle de la Pedrera Baja
-Calle de la Pedrera Baja-Calle de la Pedrera Baja
Coste: 11.97772941721774
Tiempo empleado: 43 min y 17.78019600001 seg
Elementos en memoria: 3907035
\end{verbatim}

\subsection{Profundidad Iterativa:}
Tras la ejecución de este algoritmo se obtiene lo siguiente:
\begin{verbatim}
RESULTADO:
Camino:
10902-10901-10606-10605-50005-50006-21002-50007-305-20900
-40103-40100-40502-40600-40506-40605-40907-40904-40902
Distancia: 1559
Número de bares: 17
Número de tiendas: 106
Ruta:
Calle de la Pedrera Baja-Calle de la Pedrera Baja-Calle de la Pedrera Baja
-Calle del Río-Calle Toledo-Calle de Toledo-Calle de Toledo-Calle Toledo
-Calle de Jacinto-Calle de Elisa Cendrero-Calle de la Paloma-Calle de la Paloma
-Calle de la Paloma-Calle de la Paloma-Calle Ruiz Morote-Calle de San Francisco
-Calle de San Francisco-Calle de San Francisco
Coste: 10.773819713232637
Tiempo empleado: 1 hora 57 min y 11.36394 seg
Elementos en memoria: 136023486
\end{verbatim}
A continuación cambio el destino por el origen (origen=40902 y destino=10902) y obtengo lo siguinete:
\begin{verbatim}
RESULTADO:
Camino:
40902-40904-40907-40605-40506-40600-40502-40100-40103-20900
-305-50007-21002-50006-50005-10605-10606-10901-10902
Distancia: 1559
Número de bares: 17
Número de tiendas: 106
Ruta:
Calle de San Francisco-Calle de San Francisco-Calle de San Francisco
-Calle Ruiz Morote-Calle de la Paloma-Calle de la Paloma-Calle de la Paloma
-Calle de la Paloma-Calle de Elisa Cendrero-Calle de Jacinto-Calle Toledo
-Calle de Toledo-Calle de Toledo-Calle Toledo-Calle del Río-Calle de la Pedrera Baja
-Calle de la Pedrera Baja-Calle de la Pedrera Baja
Coste: 10.773819713232637
Tiempo empleado: 2 hora 7 min y 34.60394 seg
Elementos en memoria: 136023486
\end{verbatim}

\subsection{Costo Uniforme:}
Una vez ejecutado el algoritmo del costo uniforme obtengo los siguientes resultados:
\begin{verbatim}
RESULTADO:
Camino:
10902-50003-50012-21200-21302-21303-21304-20300-20400
-40400-40401-40402-40916-40910-40908-40901-40902
Distancia: 3162
Número de bares: 18
Número de tiendas: 40
Ruta:
Calle del Clavel-Calle Toledo-Plaza de España-Calle Altagracia
-Calle Hospital de la Misericordia-Ronda de Toledo-Ronda de Calatrava
-Ronda de Calatrava-Ronda de Calatrava-Ronda de Calatrava-Ronda de Calatrava
-Ronda de Calatrava-Ronda de la Mata-Ronda de la Mata-Ronda de Granada
-Calle de la Ciruela
Coste: 9.601816148954454
Tiempo empleado: 2 horas, 20 min y 7.242702356999871 seg
Elementos en memoria: 493522383
\end{verbatim}
Vuelvo a cambiar el nodo origen por el destino y viceversa y se obtiene lo siguiente:
\begin{verbatim}
RESULTADO:
Camino:
40902-40901-40908-40910-40916-40402-40401-40400-20400-
20300-21304-21303-21302-21200-50012-50003-10902
Distancia: 3162
Número de bares: 18
Número de tiendas: 40
Ruta:
Calle de la Ciruela-Ronda de Granada-Ronda de la Mata-Ronda de la Mata
-Ronda de Calatrava-Ronda de Calatrava-Ronda de Calatrava-Ronda de Calatrava
-Ronda de Calatrava-Ronda de Calatrava-Ronda de Toledo-
Calle Hospital de la Misericordia-Calle Altagracia-Plaza de España-
Calle Toledo-Calle del Clavel
Coste: 9.601816148954454
Tiempo empleado: 2 horas, 25 min y 43.356999871 seg
Elementos en memoria: 493562185
\end{verbatim}

\subsection{A*:}
Una vez ejecutado este algoritmo obtengo los siguientes resultados:
\begin{verbatim}
RESULTADO:
Camino:
10902-50003-50012-21200-21302-21303-21304-20300-20400-
40400-40401-40402-40916-40910-40908-40901-40902
Distancia: 3162
Número de bares: 18
Número de tiendas: 40
Ruta:
Calle del Clavel-Calle Toledo-Plaza de España-Calle Altagracia-
Calle Hospital de la Misericordia-Ronda de Toledo-Ronda de Calatrava-
Ronda de Calatrava-Ronda de Calatrava-Ronda de Calatrava-Ronda de Calatrava
-Ronda de Calatrava-Ronda de la Mata-Ronda de la Mata-Ronda de Granada-
Calle de la Ciruela
Coste: 9.601816148954454
Tiempo empleado: 1 horas, 50 min y 17.2432 seg
Elementos en memoria: 493522383
\end{verbatim}
Vuelvo a cambiar el nodo origen por el destino y viceversa y se obtiene lo siguiente:
\begin{verbatim}
RESULTADO:
Camino:
40902-40901-40908-40910-40916-40402-40401-40400-20400-20300
-21304-21303-21302-21200-50012-50003-10902
Distancia: 3162
Número de bares: 18
Número de tiendas: 40
Ruta:
Calle de la Ciruela-Ronda de Granada-Ronda de la Mata-Ronda de la Mata-
Ronda de Calatrava-Ronda de Calatrava-Ronda de Calatrava-Ronda de Calatrava-
Ronda de Calatrava-Ronda de Calatrava-Ronda de Toledo-
Calle Hospital de la Misericordia-Calle Altagracia-Plaza de España-
Calle Toledo-Calle del Clavel
Coste: 9.601816148954454
Tiempo empleado: 2 horas, 19 min y 12.699981 seg
Elementos en memoria: 493562185
\end{verbatim}

\subsection{Temple Simulado o Annealing:}
Utilizando como semilla el siguiente camino 10902-10901-10606-10605-10604-10603-10602-10601-10302-50007-305-20900-40103-40100-40502-40600-40506-40605-40907-40904-40902 se obtiene el siguiente resultado:
\begin{verbatim}
RESULTADO:
Camino:
10902-50003-50004-20804-20806-21001-20903-20902-40102-40104
-40503-40601-40600-40506-40605-40907-40904-40902
Distancia: 1522
Número de bares: 9
Número de tiendas: 72
Ruta:
Calle del Clavel-Calle Toledo-Calle de la Luz-Calle de la luz-
Calle de La Luz-Calle de La Luz-Calle de la Luz-Calle de la Luz-
Calle del Cardenal Montescillo-Calle del Cardenal Monescillo-
Calle del Cardenal Monescillo-Calle Lanza-Calle de la Paloma-Calle Ruiz Morote-
Calle de San Francisco-Calle de San Francisco-Calle de San Francisco
Coste: 10.177499999999997
Tiempo empleado: 0.550740533 seg
Elementos en memoria: 30968
\end{verbatim}
Modificando el camino de entrada que se usa como semilla para este algoritmo (uso el obtenido anteriormente) y variando la función que decrementa la variable T obtenemos lo siguiente:
\begin{verbatim}
RESULTADO:
Camino:
10902-50003-50012-21200-21302-21303-21304-20300-20400-
40400-40401-40402-40916-40910-40908-40901-40902
Distancia: 3162
Número de bares: 18
Número de tiendas: 40
Ruta:
Calle del Clavel-Calle Toledo-Plaza de España-Calle Altagracia-
Calle Hospital de la Misericordia-Ronda de Toledo-Ronda de Calatrava-
Ronda de Calatrava-Ronda de Calatrava-Ronda de Calatrava-Ronda de Calatrava
-Ronda de Calatrava-Ronda de la Mata-Ronda de la Mata-Ronda de Granada-
Calle de la Ciruela
Coste: 9.601816148954454
Tiempo empleado: 3 horas, 34 min y 16.265432 seg
Elementos en memoria: 493522383
\end{verbatim}
Es obvio que el camino inicial y el grado en que se decrementa T influyen considerablemente tanto en el resultado como en el tiempo para obtener el mismo.

\newpage

\section{Comparación}
En esta sección se van a estudiar los diferentes comportamientos obtenidos tras la ejecución de cada uno de los algoritmos de búsqueda.\par
\subsection*{Primer anillo:}
Según se puede observar en el gráfico, mostrado por la figura uno, el tiempo empleado por los diferentes algoritmos para realizar la búsqueda es sumamente pequeño y apenas varía entre un algoritmo u otro. El tiempo rara vez supera el segundo, excepto para el caso del algoritmo del temple simulado.

\begin{figure}[H]
    \vspace{1cm}
    \centering
    \includegraphics{figuno.png}
    \caption{\bfseries \footnotesize \emph{Tiempo empleado en obtener una solución dentro del primer anillo.}}
\label{FIG1}
\end{figure}

En el gráfico de la figura dos se puede ver el número de elementos que se almacenan en memoria durante la ejecución de los diferentes algoritmos.

\begin{figure}[H]
    \vspace{1cm}
    \centering
    \includegraphics{figdos.png}
    \caption{\bfseries \footnotesize \emph{Número de elementos almacenados en memoria en el primer anillo.}}
\label{FIG2}
\end{figure}

Como se puede observar, de nuevo, es el algoritmo del temple simulado el que más memoria consume ya que es el algoritmo que más elementos almacena en la misma.\par

\subsection*{Segundo anillo:}
En el segundo anillo la complejidad, tanto espacial como temporal crece sensiblemente con respecto al primer anillo.\par


\begin{figure}[H]
    \vspace{1cm}
    \centering
    \includegraphics{figtres.png}
    \caption{\bfseries \footnotesize \emph{Tiempo empleado en obtener una solución dentro del segundo anillo.}}
\label{FIG3}
\end{figure}

\begin{figure}[H]
    \vspace{1cm}
    \centering
    \includegraphics{figcuatro.png}
    \caption{\bfseries \footnotesize \emph{Número de elementos almacenados en memoria en el segundo anillo.}}
\label{FIG4}
\end{figure}
Aquí se puede ver con claridad el aumento considerable en el consumo de memoria, ya que al crecer el espacio de búsqueda crece también el número de elementos que se expanden y se almacenan en memoria.

\newpage

\section{Manual de usuario.}
\subsection{Pre-requisitos:}
Para poder ejecutar este programa se necesita tener previamente instalada en el sistema la máquina virtual de Java (puede descargarlo desde esta dirección \url{http://www.java.com/es/download/} ).
Es imprescindible para el correcto funcionamiento del programa tener instalado el gestor de bases de datos MySQL y el conector JDBC que conecta la máquina virtual de Java con el gestor de bases de datos MySQL, ambos los podrá descargar desde esta dirección \url{http://dev.mysql.com/downloads/} .
Para instalar el conecto JDBC siga las instrucciones que se indican en esta dirección \url{http://dev.mysql.com/doc/refman/5.1/en/connector-j-installing.html}

\subsection{Puesta en marcha:}
Una vez que ya ha instalado en su sistema todo lo necesario para la ejecución de este programa, puede proceder a su puesta en marcha.
El fichero que inicia el programa y lo pone en ejecución es un fichero .jar llamado buscador.jar. Para ponerlo en marcha tiene dos formas de hacerlo:
\begin{itemize}
\item Desde un terminal ejecutando el comando java -jar buscador.jar
\item De manera gráfica pulsando dos veces con el ratón sobre el fichero buscador.jar
\end{itemize}
La primera ventana que se observa, una vez se ha puesto en ejecución el programa, es la que se muestra en la figura 6.
\begin{figure}[H]
    \vspace{0.5cm}
    \centering
    \includegraphics{figseis.png}
    \caption{\bfseries \footnotesize \emph{Ventana principal del programa.}}
\label{FIG6}
\end{figure}

Esta ventana es la ventana principal de la interfaz del programa, en ella se muestran las distintas opciones que brinda la interfaz del programa.\par
La primera opción que encontramos (seleccionada en color verde) es la de cargar en la base de datos el contenido de un fichero con las coordenadas de los nodos o cruces. Para cargar esos datos bastaría con pulsar el botón "Cargar datos" y se abrirá un selector de archivos para buscar y seleccionar el fichero que contiene los datos necesarios.\par
Debajo de la opción anterior encontramos (enmarcadas en rojo) unas cajas de texto en las que hemos de insertar el nodo origen y nodo destino sobre los que queremos encontrar un camino.\par
Debajo de estas cajas de texto encontramos (enmarcadas en un rectángulo de color morado) una serie de cajas de texto en las que podemos introducir el peso que queremos que tengan las variables distancia, bares, comercios a la hora de calcular el valor del costo de un nodo. Estos pesos siempre han de estar comprendidos entre 0 y 1 y entre los tres han de sumar uno.\par
En la parte derecha de la interfaz encontramos, enmarcado de color azul, el selector de algoritmos. Este selector nos permite seleccionar el algoritmo que queremos ejecutar. Además tenemos una caja de texto en la que debemos indicar la cota de profundidad que tomará el algoritmo de profundidad acotada.\par
Finalmente encontramos la opción que nos permite cargar los datos relativos a los arcos que conforman el grafo. Pulsando el botón "Cargar arcos" podremos cargar un fichero con los arcos.\par
Ahora, para ejecutar una búsqueda de soluciones empleando cualquiera de los algoritmos listados en la sección derecha de la interfaz, bastará con seleccionarlo con el ratón, dar los pesos deseados a las variables distancia, bares y comercios y pulsar en el botón "Calcular ruta". Una vez haya finalizado la búsqueda se nos devolverá una ventana como la que se muestra en la figura 7.
\begin{figure}[H]
    \vspace{0.5cm}
    \centering
    \includegraphics{figsiete.png}
    \caption{\bfseries \footnotesize \emph{Ventana con los resultados de la búsqueda.}}
\label{FIG7}
\end{figure}
En caso de que se produjese algún fallo en la memoria o en la máquina virtual de Java se nos mostraría una ventana como la de la figura 8.
\begin{figure}[H]
    \vspace{0.5cm}
    \centering
    \includegraphics{figocho.png}
    \caption{\bfseries \footnotesize \emph{Ventana con información de error.}}
\label{FIG8}
\end{figure}
Si por algún motivo el algoritmo de búsqueda no encontrase ningún camino o resultado nos mostraría una ventana como la que se observa en la figura 9.
\begin{figure}[H]
    \vspace{0.5cm}
    \centering
    \includegraphics{fignueve.png}
    \caption{\bfseries \footnotesize \emph{Ventana donde se muestra que no se encontró solución.}}
\label{FIG9}
\end{figure}
Cuando se selecciona el algoritmo del temple simulado, al pulsar sobre el botón de ejecución nos aparace la ventana de la figura 10, donde se debe meter un camino inicial que servirá como semilla de este algoritmo. Este camino debe tener los nodos divididos con quiones.
\begin{figure}[H]
    \vspace{0.5cm}
    \centering
    \includegraphics{figdiez.png}
    \caption{\bfseries \footnotesize \emph{Ventana donde se introducirá el camino inicial o semilla.}}
\label{FIG10}
\end{figure}
Por último hemos de pulsar sobre el botón "Salir" para abandonar la ejecución del programa.

\newpage

\section{Conclusiones.}
Tras la ejecución de las pruebas y tras observar los distintos resultados obtenidos a lo largo de las muchas ejecuciones llevadas a cabo durante el periodo de prácticas se llega a la siguiente serie de conclusiones:
Uno de los problemas más graves que he detectado durante la ejecución de las pruebas es que Java y MySQL son una mala combinación. Esto es debido a que es driver que permite conectar Java con las bases de datos de MySQL es muy lento. Esta lentitud provoca, en la mayoría de los casos de prueba dentro del camino difícil, que haya un fallo al leer de la base de datos.\par
Cuando se accede a una tabla de la base de datos, en busca de un dato necesario, de manera repetida en una iteración, en la que se accede a la base de datos con una frecuencia muy alta en un periodo de tiempo muy muy escaso (microsegundos) esto provoca que el sistema gestor de bases de datos o el driver que conecta Java con este se sature e impida obtener los datos.\par
Es por esto por lo que se optó como medida importante el cargar en memoria todos los datos necesarios para la ejecución del programa, de esta forma solo accederemos una vez a la base de datos al principio de la ejecución y ganaremos en velocidad de una forma considerable.\par
A pesar de los problemas que presenta Java en temas de bases de datos, he podido observar cosas curiosas como que el algoritmo de profundidad acotada es más rápido que el algoritmo de búsqueda en anchura, que, por lo general, los algoritmos de búsqueda tardan más en obtener el resultado cuando se les invierte el camino y suelen utilizar más elementos de memoria.\par
Por otro lado el número de elementos que se almacenan en memoria baja en relación entre el algoritmo del costo uniforme y el de A*, pero sin embargo el tiempo empleado por el algoritmo A* se ve incrementado en comparación al del costo uniforme.\par
Con respecto al algoritmo de temple simulado, he podido observar que las variaciones que se producen en la función que decrementa T influyen de manera significativa en el resultado. Así, cuando hacemos que T decrezca más lentamente, el tiempo de búsqueda se alarga, pero los resultados son cada vez mejores. Además, cuanto mejor es el camino inicial que se usa como semilla, mejor es el resultado obtenido y menor es el tiempo en obtenerlo.\par
Respecto a la metodología de trabajo que ha sido desarrollada a lo largo del curso he de decir que trabajar durante todo el periodo de prácticas con entregas cada dos semanas ayuda mucho a llevar al día las prácticas y no perder el hilo de lo que se está haciendo. Por otro lado, el hecho de tener que compaginar estas prácticas con las de las demás asignaturas hace que algunas veces no dispongas del tiempo necesario para que el trabajo que se realiza para cada entrega sea el apropiado y esté a la altura en cuanto a la calidad del entregable.\par
Por todo lo demás este es un buen sistema de trabajo ya que el esfuerzo que se realiza se dosifica a lo largo del cuatrimestre evitando tener que realizar un esfuerzo mayor en una sola entrega final.

\end{document}
